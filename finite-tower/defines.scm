
(define global-env #f)

(define sys/void
  (let ((g (cons '* '*)))
    (lambda () g)))

(define reifier? #f)

(define evaluate #f)
(define evaluate-constant #f)
(define evaluate-variable #f)
(define wrong #f)
(define evaluate-if #f)
(define evaluate-assignment #f)
(define evaluate-abstraction #f)
(define evaluate-combination #f)
(define evaluate-operands #f)
(define evaluate-sequence #f)
(define evaluate-sequence #f)
(define apply-procedure #f)
(define apply-primitive #f)
(define extend #f)
(define get-pair #f)
(define find-pair #f)
(define empty-env #f)
(define 1st #f)
(define 2nd #f)
(define 3rd #f)
(define 4th #f)
(define test-tag #f)
(define make-compound #f)
(define compound? #f)
(define make-primitive #f)
(define primitive? #f)
(define primitive-identifiers #f)
(define make-reifier #f)
(define reifier-to-compound #f)
(define compound-to-reifier #f)
(define reiifer? #f)
(define procedure-parameters #f)
(define procedure-body #f)
(define procedure-environment #f)
(define procedure-name #f)
(define variable? #f)
(define if? #f)
(define assignment? #f)
(define abstraction? #f)
(define quote? #f)
(define constant? #f)
(define constant-part #f)
(define test-part #f)
(define then-part #f)
(define else-part #f)
(define id-part #f)
(define value-part #f)
(define formals-part #f)
(define body-part #f)
(define operator-part #f)
(define operands-part #f)
(define openloop #f)
(define loadfile #f)
(define mapper #f)
(define initialize-global-env #f)
(define boot-flat #f)
(define boot-tower #f)
(define this-file-name #f)
